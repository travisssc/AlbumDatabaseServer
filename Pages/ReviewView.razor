@page "/{userName}/album/{albumName}"
@using AlbumDatabaseServer.Data
@inject AlbumService AlbumService
@inject UserService UserService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager
@using AlbumDatabaseServer.Components

<link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Material+Symbols+Outlined:opsz,wght,FILL,GRAD@20..48,100..700,0..1,-50..200" />
<PageTitle>'@albumName' review by @userName • Waveformd</PageTitle>
<div class="container">
    @if (reviewedAlbum == null)
    {
        <p>Loading...</p>
    }
    else
    {
        <AlbumComponent Album="@reviewedAlbum" DisplayInfo="false" />
    }
    <img src="@userProfilePicUrl"
</div>

@code {
    [Parameter] public string userName { get; set; }
    [Parameter] public string albumName{ get; set; }
    private AlbumReview albumReview = new AlbumReview();
    private Album reviewedAlbum = new Album();
    private string userProfilePicUrl = "profile-pictures/default-profile.png";

    protected override async Task OnInitializedAsync()
    {
        var profilePicUrl = await UserService.GetAccountPicAsync(userName);
        if (profilePicUrl != string.Empty) userProfilePicUrl = profilePicUrl;
        var albums = AlbumService.Albums.FindAll(a => a.Name == albumName);
        if (albums == null)
        {
            NavigationManager.NavigateTo("/404");
        }
        else
        {
            var review = await UserService.GetReviewAsync(albums[0].AlbumId, userName);
            reviewedAlbum = albums[0];
            if (albums.Count() > 0 && review == null)
            {
                for (int i = 0; i < albums.Count(); i++)
                {
                    review = await UserService.GetReviewAsync(albums[i].AlbumId, userName);
                    if (review != null)
                    {
                        reviewedAlbum = albums[i];
                        break;
                    }
                }
            }
            albumReview = review;
        }
    }
}
