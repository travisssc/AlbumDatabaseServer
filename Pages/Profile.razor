@page "/profile/{tabName}"
@using AlbumDatabaseServer.Data
@using Microsoft.AspNetCore.Components.Authorization
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager
@inject UserService UserService
@inject IDialogService DialogService
@using AlbumDatabaseServer.Components

<link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Material+Symbols+Outlined:opsz,wght,FILL,GRAD@24,400,0,0" />
<PageTitle>@username's profile • Waveformd</PageTitle>
<div class="body">
	<div class="profile-header">
		@if (isUserLoggedIn)
		{
			<img src="@profilePictureUrl" class="profile-image" />
			<div class="profile-item">
				<h2>@username</h2>
			</div>
			<div class="profile-item">
				<button class="edit-button">
					Edit profile
				</button>
			</div>
			<div class="record-count">
				<h2 class="count-number">@listenCount</h2>
				<subtitle1 class="count-text">Albums</subtitle1>
			</div>
		}
	</div>
	<div class="profile-tray">
		<button class="profile profile-tab @(tabName == "home" ? "active" : "")"
				@onclick="@(e => HandleNavigation("home"))">
			<h3>Profile</h3>
		</button>
		<button class="albums profile-tab @(tabName == "albums" ? "active" : "")"
				@onclick="@(e => HandleNavigation("albums"))">
			<h3>Albums</h3>
		</button>
		<button class="queue profile-tab @(tabName == "queue" ? "active" : "")"
				@onclick="@(e => HandleNavigation("queue"))">
			<h3>Queue</h3>
		</button>
		<button class="reviews profile-tab @(tabName == "reviews" ? "active" : "")"
				@onclick="@(e => HandleNavigation("reviews"))">
			<h3>Reviews</h3>
		</button>
		<button class="lists profile-tab @(tabName == "lists" ? "active" : "")"
				@onclick="@(e => HandleNavigation("lists"))">
			<h3>Lists</h3>
		</button>
		<button class="favorites profile-tab @(tabName == "favorites" ? "active" : "")"
				@onclick="@(e => HandleNavigation("favorites"))">
			<h3>Favorites</h3>
		</button>

	</div>
	<div class="tab-content">
		@switch (tabName)
		{
			case "home":
				<ProfileTabP />
				break;
			case "albums":
				<AlbumsTabP />
				break;
			case "queue":
				<QueueTabP />
				break;
			case "reviews":
				<ReviewsTabP />
				break;
			case "lists":
				<ListsTabP />
				break;
			case "favorites":
				<FavoritesTabP />
				break;
		
		}
	</div>
</div>

@code {
	[Parameter] public string tabName { get; set; }
	private bool isUserLoggedIn;
	private string username;
	private int tabIndex = 0;
	private string profilePictureUrl = "profile-pictures/default-profile.png";
	private int listenCount = 0;
	protected override async Task OnInitializedAsync()
	{
		var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
		var user = authState.User;
		isUserLoggedIn = user.Identity.IsAuthenticated;
		if (isUserLoggedIn)
		{
			username = user.Identity.Name;
			listenCount = await UserService.CountListenedAlbumsAsync(username);
			var profilePicture = await UserService.GetAccountPicAsync(username);
			if (profilePicture != string.Empty)
            {
                profilePictureUrl = profilePicture;
            }
		}
		Console.WriteLine("User logged in");
	}
	private void HandleNavigation(string newTabName)
	{
		NavigationManager.NavigateTo($"/profile/{newTabName}");
	}
	private async Task EditProfilePicture()
	{
		var options = new DialogOptions
			{
				CloseOnEscapeKey = true
			};
		var parameters = new DialogParameters();
		var dialog = DialogService.Show<NewProfilePictureDialog>("Edit Profile Picture", parameters, options);
		await dialog.Result.ContinueWith(async task =>
		{
			if (task.Result.Canceled) return;
			var success = (bool)task.Result.Data;
			if (success)
			{
				await OnInitializedAsync();
				StateHasChanged();
			}
		});
	}
}
