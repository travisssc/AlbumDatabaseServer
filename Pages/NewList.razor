@page "/list/new"
@using AlbumDatabaseServer.Data
@using AlbumDatabaseServer.Components
@using Microsoft.EntityFrameworkCore
@inject UserService UserService
@inject IDbContextFactory<ApplicationDbContext> _dbContextFactory
@inject AlbumService AlbumService
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider

<PageTitle>Create a new list • Waveformd</PageTitle>
<div class="container">
    <div class="header">
        <h1 class="header-text">New List</h1>
    </div>
    <hr class="divider" />
    <div class="list-form">
        <EditForm Model="@newList" OnValidSubmit="@CreateListAsync">
            <DataAnnotationsValidator />
            <ValidationSummary />
            <button type="submit" class="button-save">Save List</button>
            <div class="input-container">
                <div class="list-info">
                    <div class="name-and-search">
                        <div class="form-group">
                            <label for="listName" class="input-label">List Name</label>
                            <InputText id="listName" class="form-control" @bind-Value="newList.ListName" />
                        </div>
                        <div class="form-group">
                            <label for="albumSearch" class="input-label">Add Albums</label>
                            <div class="search-with-button">
                                <InputText id="albumSearch" class="form-control" @bind-Value="albumSearchQuery"
                                           @oninput="SearchAlbums" placeholder="Search for albums..." />
                            </div>
                            @if (searchResults != null && searchResults.Any() && isSearching)
                            {
                                <ul class="list-group">
                                    @foreach (var album in searchResults)
                                    {
                                        <li class="list-group-item" @onclick="() => AddAlbumToList(album)">
                                            <img src="@album.AlbumCover" class="item-image" />
                                            @album.Name (@album.ReleaseDate.Year) - @album.Artist.ArtistName
                                        </li>
                                    }
                                </ul>
                            }
                        </div>
                    </div>
                    <div class="list-description">
                        <div class="form-group">
                            <label for="description" class="input-label">Description</label>
                            <InputTextArea id="description" class="form-control description" @bind-Value="newList.Description" />
                        </div>
                    </div>
                </div>
            </div>
            <div class="list-container">
                @if (newListAlbums.Any())
                {
                    <SortableList id="sortable" Items="newListAlbums" Context="Album" OnUpdate="@UpdateList">
                        <SortableItemTemplate>
                            <div class="album-card">
                                <img class="album-cover" src="@Album.AlbumCover" />
                                <span class="material-symbols-outlined close" @onclick="() => RemoveAlbumFromList(Album)">
                                    close
                                </span>
                                <label class="card-index">@(newListAlbums.IndexOf(Album) + 1)</label>
                            </div>
                        </SortableItemTemplate>
                    </SortableList>
                }
            </div>
        </EditForm>
    </div>
</div>


@code {
    private AlbumLists newList = new AlbumLists();
    private List<Album> searchResults = new List<Album>();
    private List<Album> newListAlbums = new List<Album>();
    private string albumSearchQuery = "";
    private bool isSearching = false;
    private string userName;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        if (user.Identity.IsAuthenticated)
        {
            userName = user.Identity.Name;
            newList.UserId = user.Identity.Name;
        }
        else
        {
            NavigationManager.NavigateTo("/login");
        }
    }

    private async Task SearchAlbums(ChangeEventArgs e)
    {
        isSearching = true;
        albumSearchQuery = e.Value?.ToString();
        if (!string.IsNullOrEmpty(albumSearchQuery))
        {
            searchResults = await AlbumService.SearchAlbumsAsync(albumSearchQuery);
        }
        else
        {
            searchResults.Clear();
        }
    }

    private void AddAlbumToList(Album album)
    {
        isSearching = false;
        albumSearchQuery = string.Empty;
        if (!newListAlbums.Contains(album))
        {
            newListAlbums.Add(album);
        }
    }

    private void RemoveAlbumFromList(Album album)
    {
        newListAlbums.Remove(album);
    }

    private async Task CreateListAsync()
    {
        using var context = _dbContextFactory.CreateDbContext();
        context.Lists.Add(newList);
        await context.SaveChangesAsync();
        foreach (var album in newListAlbums)
        {
            context.ListAlbums.Add(new ListAlbum {
                ListId = newList.ListId, 
                AlbumId = album.AlbumId, 
                Position = newListAlbums.IndexOf(album)});
        }
        await context.SaveChangesAsync();
        NavigationManager.NavigateTo($"/{userName}/lists"); // Redirect to the lists page after creation
    }
    public void UpdateList((int oldIndex, int newIndex) indices)
    {
        // deconstruct the tuple
        var (oldIndex, newIndex) = indices;

        var items = this.newListAlbums;
        var itemToMove = items[oldIndex];
        items.RemoveAt(oldIndex);

        if (newIndex < items.Count)
        {
            {
                items.Insert(newIndex, itemToMove);
            }
        }
        else
        {
            {
                items.Add(itemToMove);
            }
        }
    }
}
