@page "/search/{searchQuery}"
@using AlbumDatabaseServer.Data
@inject AlbumService AlbumService
@inject UserService UserService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager
@inherits MainLayout

<link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Material+Symbols+Outlined:opsz,wght,FILL,GRAD@20..48,100..700,0..1,-50..200" />
<PageTitle>Search results for @searchQuery • Waveformd</PageTitle>
@if (searchResults == null)
{
    <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
}
else if (searchResults.Count == 0)
{
    <MudContainer Style="align-items">
        <h2 class="pt-16">No results</h2>
        <hr style="border: 1px solid #212121; margin-bottom: 12px; margin-top: 5px"/>
        <p>There were no matches for your search term.</p>
    </MudContainer>
}
else
{
    <MudContainer Class="mt-2 pt-16 rounded-lg" Style="background-color: #121212">
        @if (searchResults.Count < 250)
        {
            <h3>Found @searchResults.Count matches for "@searchQuery"</h3>
        }
        else
        {
            <h3>Found at least 250 matches for "@searchQuery"</h3>
        }
        <hr style="border: 1px solid #212121; margin-bottom: 16px; margin-top: 5px;"/>
        @foreach (var result in searchResults)
        {
            <div class="result" @onclick="()=> HandleNavigation(result, 0)">
                <button class="view-album">
                    <MudImage Src="@result.AlbumCover" Alt="@result.Name" Width="200" Class="rounded-lg" />
                </button>
                <div class="result-info">
                    <div class="name-date">
                        <a class="link-album">
                            <h1 class="result-name">@result.Name</h1>
                        </a>
                        <a class="link-year">
                            <h1 class="result-year">@result.ReleaseDate.Year</h1>
                        </a>
                    </div>
                    <a class="link-artist">
                        <h3 class="result-artist" @onclick="() => HandleNavigation(result, 1)"
                            @onclick:stopPropagation="true">@result.Artist.ArtistName</h3>
                    </a>
                    <MudChipSet Class="pt-16" Style="white-space: nowrap;">
                        @foreach (var albumGenre in result.AlbumGenres)
                        {
                            var style = $"background: {GetGenreGradient(albumGenre.Genre.Name)};";
                            <MudChip Style="@style" Text="@albumGenre.Genre.Name"></MudChip>
                        }
                    </MudChipSet>
                </div>
                <div class="rating-container">
                    <AlbumDatabaseServer.Components.AverageRating averageRating="Math.Round(AlbumService.GetAverageRating(result.AlbumId), 1)"
                                                                  ratingCount="AlbumService.GetRatingCount(result.AlbumId)"/>
                </div>
            </div>
            <hr class="result-divider"/>
        }
    </MudContainer>
}



@code {
    [Parameter]
    public string searchQuery { get; set; }
    private bool isQueued = false;
    private List<Album> searchResults;
    private string userName;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        if (user.Identity.IsAuthenticated)
        {
            userName = user.Identity.Name;
        }
    }
    protected override async Task OnParametersSetAsync()
    {
        await LoadSearchResults();
    }
    private async Task LoadSearchResults()
    {
        if (!string.IsNullOrEmpty(searchQuery))
        {
            searchResults = AlbumService.Albums
                .Where(album => album.Name.Contains(searchQuery, StringComparison.OrdinalIgnoreCase) ||
                                album.Artist.ArtistName.Contains(searchQuery, StringComparison.OrdinalIgnoreCase))
                .ToList();
        }
    }
    private void HandleNavigation(Album album, int type)
    {
        if (type == 0)
        {
            var encodedArtistName = Uri.EscapeDataString(album.Artist.ArtistName);
            var encodedAlbumName = Uri.EscapeDataString(album.Name);
            NavigationManager.NavigateTo($"/albums/{encodedArtistName}/{encodedAlbumName}");
        }
        else
        {
            var encodedArtistName = Uri.EscapeDataString(album.Artist.ArtistName);
            NavigationManager.NavigateTo($"/artists/{encodedArtistName}?artistId={album.ArtistId}");
        }

    }
}
