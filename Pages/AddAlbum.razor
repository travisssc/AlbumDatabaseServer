@page "/addalbum"
@using AlbumDatabaseServer.Data
@using Microsoft.EntityFrameworkCore
@inject IDbContextFactory<ApplicationDbContext> DbFactory
@inject NavigationManager NavigationManager

<h3>Add album</h3>

<EditForm Model="@album" OnValidSubmit="@HandleValidSubmit">
    <DataAnnotationsValidator />

    <div class="form-group">
        <label for="name">Name:</label>
        <InputText id="name" class="form-control" @bind-Value="@album.Name" />
        <ValidationMessage For="@(() => album.Name)" />
    </div>
    
    <div class="form-group">
        <label for="artist">Artist:</label>
        @if (artists != null) {
            <InputSelect id="artist" class="form-control" @bind-Value="@album.ArtistId">
                <option value="">Select Existing Artist</option>
                @foreach (var artist in artists) {
                    <option value="@artist.ArtistId">@artist.ArtistName</option>
                }
                <option value="-1">Add New Artist</option>
            </InputSelect>
            <ValidationMessage For="@(() => album.ArtistId)" />
        }
        else {
            <p>Loading artist...</p>
        }
    </div>
    @if (showNewArtistInput) {
        <div class="form-group">
            <label for="newArtistName">New Artist Name:</label>
            <InputText id="newArtistName" class="form-control" @bind-Value="@newArtistName" />
        </div>
    }

    <div class="form-group">
        <label for="releaseDate">Release Date:</label>
        <InputDate id="releaseDate" class="form-control" @bind-Value="@album.ReleaseDate" />
        <ValidationMessage For="@(() => album.ReleaseDate)" />
    </div>

    <div class="form-group">
        <label for="genres">Genres:</label>
        @if (genres != null) {
            <InputSelect id="genres" class="form-control" @bind-Value="@selectedGenreIds" multiple> @* Add multiple *@
                @foreach (var genre in genres)
                {
                    <option value="@genre.GenreId">@genre.Name</option>
                }
            </InputSelect>
        }
    </div>

    <button type="submit" class="btn btn-primary">Create Album</button>

</EditForm>

@code {
    private Album album = new Album();
    private List<Genre> genres;
    private List<Artist> artists;
    private string[] selectedGenreIds = new string[0];
    private string newArtistName = "";
    private bool showNewArtistInput = false;
    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        genres = await context.Genres.ToListAsync();
        artists = await context.Artists.ToListAsync();
    }
    private async Task HandleValidSubmit() {
        using var context = DbFactory.CreateDbContext();
        if (album.ArtistId == -1) {
            var newArtist = new Artist { ArtistName = newArtistName };
            context.Artists.Add(newArtist);
            await context.SaveChangesAsync();
            album.ArtistId = newArtist.ArtistId;
        }
        foreach (var genreIdString in selectedGenreIds) {
            if (int.TryParse(genreIdString, out var genreId)) {
                album.AlbumGenres.Add(new AlbumGenre { GenreId = genreId });
            }
        }
        context.Albums.Add(album);
        await context.SaveChangesAsync();

        NavigationManager.NavigateTo("/fetchalbums");
    }
    private void OnArtistSelectionChanged(ChangeEventArgs e) {
        if (e.Value.ToString() == "-1") {
            showNewArtistInput = true;
        }
        else {
            showNewArtistInput = false;
            album.ArtistId = int.Parse(e.Value.ToString());
        }
    }
    
}
