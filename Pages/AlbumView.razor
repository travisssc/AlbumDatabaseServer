@page "/albums/{artistName}/{albumName}"
@using AlbumDatabaseServer.Data
@using AlbumDatabaseServer.Components
@inject AlbumService AlbumService
@inject UserService UserService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager
@inherits MainLayout
@inject ISnackbar Snackbar

<link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Material+Symbols+Outlined:opsz,wght,FILL,GRAD@20..48,100..700,0..1,-50..200" />
<PageTitle>@album.Name (@album.ReleaseDate.Year) by @album.Artist.ArtistName • Waveformd</PageTitle>
@if (album == null)
{
    <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
}
else
{
    <MudContainer>
        <div class="album-card">
            <div class="card-content">
                <div class="side-panel">
                    <img src="@album.AlbumCover" alt="@album.Name" class="album-cover" />
                    @if (latestReviewUserName != null)
                    {
                        <hr class="divider"/>
                        <ReviewCard album="@album" width="album-view" userName="@latestReviewUserName"/>
                        <hr class="divider"/>
                    }
                    else if (latestReviewUserName == null)
                    {
                        <hr class="divider" />
                        <div class="no-review-container">
                            <p class="no-review-text">Be the first to write a review for this album!</p>
                        </div>
                        <hr class="divider"/>
                    }
                </div>
                <div class="album-text-info">
                    <div class="album-name">
                        <h1>@album.Name</h1>
                    </div>
                    <div class="artist-genres">
                        <div class="artist-name" @onclick="() => HandleNavigation(album)">
                            <h2>@album.Artist.ArtistName</h2>
                        </div>
                        <div class="genres">
                            <MudChipSet>
                                @foreach (var genre in album.AlbumGenres)
                                {
                                    var style = $"background: {GetGenreGradient(genre.Genre.Name)};";
                                    <MudChip Style="@style" Text="@genre.Genre.Name"></MudChip>
                                }
                            </MudChipSet>
                        </div>
                    </div>
                    <div class="album-date">
                        <h3>@album.ReleaseDate.ToShortDateString()</h3>
                    </div>
                    <div class="tracks-and-ufunctions">
                        <div class="tracklist">
                            <h3>Track list</h3>
                            <ol class="tracks">
                                @foreach (var song in album.Songs)
                                {
                                    <li class="track">@song.SongName</li>
                                }
                            </ol>
                        </div>
                        <div class="user-plus-rating">
                            <AverageRating averageRating="averageRating" ratingCount="ratingCount" />
                            <AlbumUserFunctions album="album" />
                        </div>    
                    </div>  
                </div>
            </div>
        </div>
    </MudContainer>
}

@code {
    [Parameter]
    public string artistName { get; set; }
    [Parameter]
    public string albumName { get; set; }
    private Album album;
    private string latestReviewUserName;
    private string userName;
    private decimal averageRating = 0;
    private int ratingCount = 0;
    private bool isInitialized = false;

    protected override async Task OnInitializedAsync()
    {
        var decodedArtistName = Uri.UnescapeDataString(artistName);
        var decodedAlbumName = Uri.UnescapeDataString(albumName);
        await LoadAlbumDetails(decodedArtistName, decodedAlbumName);
        averageRating = Math.Round(AlbumService.GetAverageRating(album.AlbumId), 1);
        ratingCount = AlbumService.GetRatingCount(album.AlbumId);
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        var latestReview = await UserService.GetLatestReviewAsync(album.AlbumId);
        if (latestReview != null) latestReviewUserName = latestReview.UserName;
        if (user.Identity.IsAuthenticated)
        {
            userName = user.Identity.Name;
        }
        isInitialized = true;
    }

    private async Task LoadAlbumDetails(string decodedArtistName, string decodedAlbumName)
    {
        if (!string.IsNullOrEmpty(decodedArtistName) && !string.IsNullOrEmpty(decodedAlbumName))
        {
            album = AlbumService.Albums
                .FirstOrDefault(a => a.Name.Equals(decodedAlbumName, StringComparison.OrdinalIgnoreCase) &&
                                     a.Artist.ArtistName.Equals(decodedArtistName, StringComparison.OrdinalIgnoreCase));
        }
    }

    private void HandleNavigation(Album album)
    {
        var encodedArtistName = Uri.EscapeDataString(album.Artist.ArtistName);
        NavigationManager.NavigateTo($"/artists/{encodedArtistName}?artistId={album.ArtistId}");
    }
}
