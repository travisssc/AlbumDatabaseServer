@using AlbumDatabaseServer.Data
@using Microsoft.AspNetCore.Components.Authorization
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager
@inject UserService UserService

<link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Material+Symbols+Outlined:opsz,wght,FILL,GRAD@24,400,0,0" />
<div style="color-scheme:dark">
    <AuthorizeView>
        <Authorized>
                <div class="profile-container">
                    <button class="profile-button" @onclick="NavToProfile">
                    <img src="@profilePictureUrl" class="profile-image" />
                        @context.User.Identity?.Name
                    </button>
                    <div class="dropdown-menu">
                        <a href="Identity/Account/Manage">Manage Account</a>
					    <form method="post" action="Identity/Account/LogOut">
						    <button type="submit" class="nav-link btn btn-link">Log out</button>
					    </form>
                    </div>
                </div>
                @*             <a href="Identity/Account/Manage">Hello, @context.User.Identity?.Name!</a>
                *@            
                @* <div class="item">
                    <form method="post" action="Identity/Account/LogOut">
                        <button type="submit" class="nav-link btn btn-link">Log out</button>
                    </form>
                </div> *@
        </Authorized>
        <NotAuthorized>
            <a href="Identity/Account/Register">Register</a>
            <a> / </a>
            <a href="Identity/Account/Login">Log in</a>
        </NotAuthorized>
    </AuthorizeView>
</div>
@code {
    private bool isUserLoggedIn;
    private string username;
    private string profilePictureUrl = "profile-pictures/default-profile.png";

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        isUserLoggedIn = user.Identity.IsAuthenticated;
        if (isUserLoggedIn)
        {
            username = user.Identity.Name;
            var profilePicture = await UserService.GetAccountPicAsync(username);
            if (profilePicture != string.Empty)
            {
                profilePictureUrl = profilePicture;
            }
        }
    }
	private void NavToProfile()
	{
		NavigationManager.NavigateTo("/profile/home");
	}
}
    


