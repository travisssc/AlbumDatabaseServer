@inherits LayoutComponentBase
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider

<link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Material+Symbols+Outlined:opsz,wght,FILL,GRAD@24,400,0,0" />
<MudDialogProvider/>
<MudSnackbarProvider/>

<PageTitle>AlbumDatabaseServer</PageTitle>

<MudLayout>
    <MudAppBar>
        <a href="/" style="color: #b3b3b3;">
            <div class="logo-container">
                <img src="@logoUrl" class="logo-image" />
                <h1 class="logo-text">waveformd</h1>
            </div>
        </a>
        <MudSpacer></MudSpacer>
        <LoginDisplay />
        <a href="@(isUserLoggedIn ? "/profile/queue" : "/queue")">
            <div class="tab queue">
                <span class="material-symbols-outlined">
                    queue_music
                </span>
                <span style="padding-left: 5px;">Your Queue</span>
            </div>
        </a>
        <a href="/Albums" class="tab">
            Albums
        </a>
        <a href="/Lists" class="tab">
            Lists
        </a>
        <a href="/Members" class="tab">
            Members
        </a>
        <div class="search-bar">
            <input type="text" class="search-bar-input"
                   placeholder="Looking for an album?" aria-label="search"
                   @bind="_searchString" @onkeyup="HandleSearchKeyUp" />
            <button class="search-bar-submit" aria-label="submit search">
				<span class="material-symbols-outlined search">
					search
				</span>
            </button>
        </div>
        <a href="/fetchdata" class="tab">Admin view</a>
    </MudAppBar>
@*     <MudDrawer @bind-Open="@_drawerOpen">
        <NavMenu/>
    </MudDrawer> *@
    <MudMainContent>
        @Body
    </MudMainContent>
</MudLayout>
<style>
    .transparent-container {
        background-color: transparent;
    }

    .mud-chart {
        transform: scale(1.75);
    }
    .mud-chart-bar {
        stroke-width: 135px;
        stroke: #3BADE1;
    }
    .mud-chart-legend {
        display: none !important;
    }

    .mud-charts-yaxis {
        display: none;
    }

    .mud-charts-grid {
        display: none;
    }

    .mud-timeline-vertical .mud-timeline-item {
        padding-bottom: 16px !important;
    }

    .mud-expand-panel-content {
        position: absolute !important;
        z-index: 2 !important;
        display: none !important; 
    }
    .mud-expand-panel {
        background: transparent;
    }

    .mud-expand-panel.mud-panel-expanded {
        border-top-left-radius: 8px;
        border-top-right-radius: 8px;
        background: #212121;
    }
    .mud-panel-expanded .mud-expand-panel-content{
        display: block !important;
        background: #212121;
        border-bottom-right-radius: 8px;
        border-bottom-left-radius: 8px;
        width: 100%;
        padding: 0px 10px 8px;
    }
    .form-control {
        border-radius: 4px;
        background: #535353;
        color: white;
        padding: 8px;
        font-size: 1.1rem;
    }
    .form-control.description {
        height: 128px;
    }
    .mud-dialog {
        border-radius: 10px;
        background: #212121;
    }
</style>

<MudThemeProvider Theme="@customTheme" />

@code {
    bool _drawerOpen = true;
    private string _searchString = "";
    private string logoUrl = "logos/waveformd-logo.png";
    private bool isUserLoggedIn = false;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        isUserLoggedIn = user.Identity.IsAuthenticated;
    }
    private void HandleSearchKeyUp(KeyboardEventArgs e)
    {
        if (e.Key == "Enter" && !string.IsNullOrEmpty(_searchString))
        {
            NavigationManager.NavigateTo($"/search/{_searchString}");
        }
    }
    void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }
    private void NavigateTo(string route)
	{
		NavigationManager.NavigateTo(route);
	}


    MudTheme customTheme = new MudTheme()
    {
        Palette = new PaletteDark()
        {
            Background = "000000",
            Primary = "FFFFFF",
            Secondary = "212121",
            Tertiary = "b3b3b3",
            TextPrimary = "FFFFFF",
            Surface = "121212",
            DrawerBackground = "121212",
            DrawerText = "FFFFFF",
            AppbarBackground = "121212",
            AppbarText = "FFFFFF",
            TableHover = "212121",
            Success = "3BADE1",
            
        },
        Typography = new Typography()
        {
            Default = new Default()
            {
                FontFamily = new[] { "Circular Std Black", "sans-serif" }
            },
        }
    };
    protected Dictionary<string, string> GenreGradients = new Dictionary<string, string>
    {
        { "Rock", "linear-gradient(45deg, #302B2B, #B23A3A)" },
        { "Pop", "linear-gradient(45deg, #ba7fdb, #74d9ed)" },
        { "R&B", "linear-gradient(45deg, #482175, #29298a);"},
        { "Electronic", "linear-gradient(45deg, #18c9c9, #5fd640)"},
        { "Hip Hop", "linear-gradient(45deg, #E5B800, #8B6D42, #292929)" },
        { "Country", "linear-gradient(45deg, #8B4513, #FFD700);"},
        { "Jazz", "linear-gradient(45deg, #23236e, #551b80);"},
        { "Classical", "linear-gradient(45deg, #FFFFF0, #800020);"},
        { "World", "linear-gradient(45deg, #40E0D0, #000080);"},
        { "Reggae", "linear-gradient(45deg, #4F8F4F, #D4B050, #A02A2A);" },
        { "Latin", "linear-gradient(45deg, #FF4500, #FFD700);"},
        { "Alternative", "linear-gradient(45deg, #9B59B6, #26A69A);"},
        { "Indie", "linear-gradient(45deg, #48BEE5, #FF6347);"},
        { "Blues", "linear-gradient(45deg, #2b45ad, #2d2bad);"},
        { "Metal", "linear-gradient(45deg, #000000, #434545);"},
        { "Experimental", "linear-gradient(45deg, #8A2BE2, #C0C0C0);"},
        { "Punk", "linear-gradient(45deg, #000000, #FF69B4);"},
        { "Folk", "linear-gradient(45deg, #8B4513, #6B8E23);"},
        { "Instrumental", "linear-gradient(45deg, #87CEEB, #708090);"},
        { "Chill", " linear-gradient(45deg, #ADD8E6, #40E0D0);"}
        


        // Add more genres and their corresponding gradients here
    };

    protected string GetGenreGradient(string genre)
    {
        if (GenreGradients.TryGetValue(genre, out var gradient))
        {
            return gradient;
        }
        return "linear-gradient(45deg, #DDD, #EEE)"; // Default gradient if genre is not found
    }

}
