@using AlbumDatabaseServer.Data
@inject UserService UserService
@inject AlbumService AlbumService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager

<link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Material+Symbols+Outlined:opsz,wght,FILL,GRAD@20..48,100..700,0..1,-50..200" />
<div class="tab-container">
	<div class="tab-content">
		<div class="cover-container">
			<h3>Recent Favorites</h3>
			<hr class="divider" />
			<div class="card-container">
				@if (favoriteAlbums == null)
				{
					<p>No favorites yet!</p>
				}
				else
				{
					@foreach (var album in favoriteAlbums)
					{
						<div class="album-card">
							<AlbumComponent Album=@album />
						</div>
					}
				}
			</div>
			<h3>Recent Listens</h3>
			<hr class="divider" />
			<div class="card-container">
				@if (listenedAlbums == null)
				{
					<p>No listens yet!</p>
				}
				else
				{
					@foreach (var album in listenedAlbums)
					{
						<div class="album-card">
							<AlbumComponent Album=@album />
						</div>
					}
				}
			</div>
			@if (reviewedAlbums != null)
			{
				<h3>Recent Reviews</h3>
				<hr class="divider" />
				<div class="review-container">
					@foreach (var album in reviewedAlbums)
					{
						<ReviewCard album="album" width="profile" userName="@userName"/>
					}
				</div>
			} 
		</div>
		<div class="side-panel">
			<div class="text-container">
				<h3>Queue</h3>
				<h3 class="info-text">@queueCount</h3>
			</div>
			<hr class="divider" />
			<div class="display-container" @onclick="@(e => HandleNavigation("queue"))">
				<ListDisplay Username="@userName" ListType="queued"/>
			</div>
			<div class="text-container">
				<h3>Ratings</h3>
				<h3 class="info-text">@ratingCount</h3>
			</div>
			<hr class="divider" />
			<div class="display-container">
				<MudChart ChartType="ChartType.Bar" ChartSeries="@ratingChartSeries"
					Height="80px" Width="340px"/>
			</div>
			<hr class="spacer"/>
			<h3>Activity</h3>
			<hr class="divider" />
			@if (userActivities == null)
			{
				<p>No activity yet!</p>
			}
			else
			{
				<MudTimeline TimelinePosition="TimelinePosition.Start">
					@foreach (var activity in userActivities)
					{
						<MudTimelineItem TimelineAlign="TimelineAlign.End">
							<subtitle1 class="activity-text">@activity.ActivityType</subtitle1>
							<subtitle2 class="date-text">@FormatTimeToDate(activity.Date)</subtitle2>
						</MudTimelineItem>
					}
				</MudTimeline>
			}
		</div>
	</div>
</div>


@code {
	[Parameter] public string userName { get; set; }
	private string currentUsername;
	private List<Album> favoriteAlbums;
	private List<Album> listenedAlbums;
	private List<Album> reviewedAlbums;
	private int queueCount = 0;
	private int ratingCount = 0;
	public List<ChartSeries> ratingChartSeries = new List<ChartSeries>();
	private List<UserActivity> userActivities = new List<UserActivity>();
	protected override async Task OnInitializedAsync()
	{
		var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
		var user = authState.User;
		currentUsername = user.Identity.Name;
		var favoriteAlbumsList = await UserService.GetFavoriteAlbumsAsync(userName);
		var listenedAlbumsList = await UserService.GetListenedAlbumsAsync(userName);
		var reviewedAlbumsList = await UserService.GetReviewedAlbumsAsync(userName);
		queueCount = await UserService.GetQueueCountAsync(userName);
		ratingCount = await UserService.GetRatingCountAsync(userName);
		var ratingNumbers = await UserService.GetRatingDistributionAsync(userName);
		userActivities = await UserService.GetUserActivitiesAsync(userName);
		var activityName = (currentUsername == userName) ? "You" : userName;
		foreach (var activity in userActivities)
		{
			var album = AlbumService.Albums.FirstOrDefault(a => a.AlbumId == activity.AlbumId);
			if (album != null)
			{
				activity.AlbumName = album.Name;
				activity.ActivityType = activity.ActivityType switch
				{
					"Queued" => activityName + " added " + album.Name + " to your queue",
					"Rated" => activityName + " rated " + album.Name,
					"Favorited" => activityName + " favorited " + album.Name,
					"Listened" => activityName + " listened to " + album.Name,
					"Reviewed" => activityName + " reviewed " + album.Name,
				};
			}
		}
		double[] ratingDistribution = { 0, 0, 0, 0, 0 };
		foreach (var val in ratingNumbers)
		{
			ratingDistribution[(int)val - 1]++;
		}
		ratingChartSeries = new List<ChartSeries>()
		{
			new ChartSeries() { Name = "", Data = ratingDistribution }
		};
		if (favoriteAlbumsList.Any())
		{
			favoriteAlbums = favoriteAlbumsList
				.Select(fav => AlbumService.Albums.FirstOrDefault(a => a.AlbumId == fav.AlbumId))
				.Where(album => album != null)
				.Take(4)
				.ToList();
		}
		if (listenedAlbumsList.Any())
		{
			listenedAlbums = listenedAlbumsList
				.Select(listened => AlbumService.Albums.FirstOrDefault(a => a.AlbumId == listened.AlbumId))
				.Where(album => album != null)
				.Take(4)
				.ToList();
		}
		if (reviewedAlbumsList.Any())
		{
			reviewedAlbums = reviewedAlbumsList
				.Select(review => AlbumService.Albums.FirstOrDefault(a => a.AlbumId == review.AlbumId))
				.Where(album => album != null)
				.Take(2)
				.ToList();
		}
	}
	private string FormatTimeToDate(DateTime activityDate)
	{
		var timeSpan = DateTime.UtcNow - activityDate;
		return timeSpan switch
		{
			{ TotalMinutes: < 1 } => "Just now",
			{ TotalMinutes: < 60 } => $"{(int)timeSpan.TotalMinutes}m",
			{ TotalHours: < 24 } => $"{(int)timeSpan.TotalHours}h",
			{ TotalDays: < 7 } => $"{(int)timeSpan.TotalDays}d",
			{ TotalDays: < 30 } => $"{(int)timeSpan.TotalDays / 7}w",
			{ TotalDays: < 365 } => $"{(int)timeSpan.TotalDays / 30}m",
			_ => $"{(int)timeSpan.TotalDays / 365}yr"
		};
	}
	private void HandleNavigation(string newTabName)
	{
		NavigationManager.NavigateTo($"/{userName}/{newTabName}");
	}
}
