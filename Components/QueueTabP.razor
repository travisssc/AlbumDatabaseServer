@using AlbumDatabaseServer.Data
@inject UserService UserService
@inject AlbumService AlbumService
@inject GenreService GenreService
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider

<link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Material+Symbols+Outlined:opsz,wght,FILL,GRAD@20..48,100..700,0..1,-50..200" />
<div class="body">
    <div class="header-container">
        <h2 class="header">@queuedText</h2>
        <SortComponent allAlbums="@allQueuedAlbums" 
            listType="queued" 
            totalPages="@totalPages" 
            OnAlbumsChanged="HandleAlbumsChanged"
            OnTotalPagesChanged="HandleTotalPagesChanged" />
    </div>
    <div class="album-container">
        @if (queuedAlbums == null)
        {
            <p>No listens yet!</p>
        }
        else
        {
            @foreach (var album in GetPaginatedAlbums())
            {
                <div class="album-card">
                    <div class="album-component">
                        <AlbumComponent album=@album displayInfo="false" />
                    </div>
                </div>
            }
        }
    </div>
    <div class="pagination-controls">
        @foreach (var pageNumber in GetPageNumbers())
        {
            if (pageNumber == -1)
            {
                <span class="ellipsis">...</span>
            }
            else
            {
                <button @onclick="() => SetPage(pageNumber)"
                        class="@(pageNumber == pageIndex ? "active-page" : "")">
                    @pageNumber
                </button>
            }
        }
    </div>
</div>

@code {
    private string userName;
    private string queuedText = "You haven't added any albums to your queue...";
    private List<Album> allQueuedAlbums; // Master list
    private List<Album> queuedAlbums;
    private Dictionary<int, int> albumRatings = new();
    private int pageIndex = 1;
    private int totalPages;
    private const int pageSize = 25;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        if (user.Identity.IsAuthenticated)
        {
            userName = user.Identity.Name;
            var queuedAlbumsList = await UserService.GetQueuedAlbumsAsync(userName);
            if (queuedAlbumsList.Any())
            {
                allQueuedAlbums = queuedAlbumsList
                    .Select(queued => AlbumService.Albums.FirstOrDefault(a => a.AlbumId == queued.AlbumId))
                    .Where(album => album != null)
                    .ToList();
                queuedText = $"You have {allQueuedAlbums.Count()} albums in your queue";
                foreach (var album in allQueuedAlbums)
                {
                    var rating = await UserService.GetRatingIntAsync(album.AlbumId, userName);
                    albumRatings[album.AlbumId] = rating;
                }
                queuedAlbums = new List<Album>(allQueuedAlbums);
                totalPages = (int)Math.Ceiling((double)queuedAlbums.Count / pageSize);
            }
        }
    }
    private void HandleAlbumsChanged(List<Album> newAlbums)
    {
        queuedAlbums = newAlbums;
        SetPage(1);
    }

    private void HandleTotalPagesChanged(int newTotalPages)
    {
        totalPages = newTotalPages;
        SetPage(1);
    }
    private List<Album> GetPaginatedAlbums()
    {
        return queuedAlbums
        .Skip((pageIndex - 1) * pageSize)
        .Take(pageSize)
        .ToList();
    }
    private void SetPage(int pageNum)
    {
        pageIndex = pageNum;
    }
    private IEnumerable<int> GetPageNumbers()
    {
        if (totalPages <= 5)
        {
            return Enumerable.Range(1, totalPages);
        }
        var pages = new List<int>();
        if (pageIndex == 1)
        {
            pages.AddRange(Enumerable.Range(1, pageIndex + 2));
            pages.Add(-1);
            pages.Add(totalPages);
        }
        else if (pageIndex > 1 && pageIndex < 5)
        {
            pages.AddRange(Enumerable.Range(1, pageIndex + 2));
            pages.Add(-1); // Ellipsis
            pages.Add(totalPages);
        }
        else if (pageIndex > 4 && pageIndex < totalPages - 2)
        {
            pages.Add(1);
            pages.Add(-1); // Ellipsis
            pages.AddRange(Enumerable.Range(pageIndex - 2, 5));
            pages.Add(-1);
            pages.Add(totalPages);
        }
        else if (pageIndex >= totalPages - 2 && pageIndex < totalPages)
        {
            pages.Add(1);
            pages.Add(-1);
            pages.AddRange(Enumerable.Range(pageIndex - 2, totalPages - pageIndex + 3));
        }
        else
        {
            pages.Add(1);
            pages.Add(-1);
            pages.AddRange(Enumerable.Range(pageIndex - 2, 3));
        }


        return pages;
    }
    private void HandleNavigation(Album album)
    {
        var encodedArtistName = Uri.EscapeDataString(album.Artist.ArtistName);
        var encodedAlbumName = Uri.EscapeDataString(album.Name);
        NavigationManager.NavigateTo($"/albums/{encodedArtistName}/{encodedAlbumName}");
    }
}