@using AlbumDatabaseServer.Data
@using AlbumDatabaseServer.Data
@inject AlbumService AlbumService
@inject UserService UserService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject ISnackbar Snackbar

<link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Material+Symbols+Outlined:opsz,wght,FILL,GRAD@20..48,100..700,0..1,-50..200" />
<div class="ufunctions">
    <div class="button-functions">
        <button class="function-button"
                @onclick="ToggleListen"
                @onmouseover="OnListenMouseOver"
                @onmouseout="OnListenMouseOut">
            <span class="material-symbols-outlined icon listen @(isListened ? "active" : "")">
                album
            </span>
            <subtitle1 class="button-text">@hoverListen</subtitle1>
        </button>
        <button class="function-button"
                @onclick="ToggleFavorite"
                @onmouseover="OnFavoriteMouseOver"
                @onmouseout="OnFavoriteMouseOut">
            <span class="material-symbols-outlined icon fav @(isFavorited ? "active" : "")">
                favorite
            </span>
            <subtitle1 class="button-text">@hoverFavorite</subtitle1>
        </button>
        <button class="function-button"
                @onclick="ToggleQueue"
                @onmouseover="OnQueueMouseOver"
                @onmouseout="OnQueueMouseOut">
            <span class="material-symbols-outlined icon q @(isQueued ? "active" : "")">
                @(isQueued ? "playlist_add_check_circle" : "playlist_add_circle")
            </span>
            <subtitle1 class="button-text">@hoverQueue</subtitle1>
        </button>
    </div>
    <div class="rating-container">
        <subtitle1>@(isRated ? "Rated" : "Rate")</subtitle1>
        <MudRating @bind-SelectedValue="currentRating" Size="Size.Large" Color="Color.Success" />
    </div>
    <textarea class="review-box" type="text" @bind="_reviewText"
              placeholder="Add a review..." />
    <div class="save-area">
        <p class="error-text">@errorText</p>
        <button class="save-review-button" @onclick="SubmitReview">Save</button>
    </div>
</div>
@code {
    [Parameter] public Album album { get; set; }
    private string userName;
    private bool isListened = false;
    private bool isFavorited = false;
    private bool isQueued = false;
    private string hoverListen;
    private string hoverFavorite;
    private string hoverQueue;
    private string _reviewText = "";
    private bool isReviewed = false;
    private bool isRated = false;
    private bool isInitialized = false;
    private string errorText = "";
    private int _currentRating = 0;
    private int currentRating
    {
        get => _currentRating;
        set
        {
            if (_currentRating != value)
            {
                _currentRating = value;
                if (isInitialized)
                {
                    SubmitRating(_currentRating);
                }
            }
        }
    }

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        if (user.Identity.IsAuthenticated)
        {
            userName = user.Identity.Name;
            if (album != null)
            {
                isListened = await UserService.IsAlbumListenedAsync(album.AlbumId, userName);
                isFavorited = await UserService.IsAlbumFavoritedAsync(album.AlbumId, userName);
                isQueued = await UserService.IsAlbumQueuedAsync(album.AlbumId, userName);
                var existingRating = await UserService.GetRatingAsync(album.AlbumId, userName);
                var existingReview = await UserService.GetReviewAsync(album.AlbumId, userName);
                if (existingRating != null)
                {
                    currentRating = existingRating.Rating;
                    isRated = true;
                }
                if (existingReview != null)
                {
                    _reviewText = existingReview.ReviewText;
                    isReviewed = !string.IsNullOrEmpty(_reviewText);
                }
                hoverListen = isListened ? "Listened" : "Listen";
                hoverFavorite = isFavorited ? "Favorited" : "Favorite";
                hoverQueue = isQueued ? "In Queue" : "Queue";
            }
        }
        isInitialized = true;
    }
    private async Task ToggleListen()
    {
        if (!string.IsNullOrEmpty(userName) && album != null)
        {
            await UserService.ToggleListenAsync(album.AlbumId, userName);
            isListened = !isListened;
            hoverListen = isListened ? "Listened" : "Listen";
            if (isQueued && isListened)
            {
                ToggleQueue();
            }
        }
    }

    private void OnListenMouseOver()
    {
        if (isListened)
        {
            hoverListen = "Remove";
        }
    }

    private void OnListenMouseOut()
    {
        if (isListened)
        {
            hoverListen = "Listened";
        }
    }
    private async Task ToggleFavorite()
    {
        if (!string.IsNullOrEmpty(userName) && album != null)
        {
            await UserService.ToggleFavoriteAsync(album.AlbumId, userName);
            isFavorited = !isFavorited;
            hoverFavorite = isFavorited ? "Favorited" : "Favorite";
        }
    }

    private void OnFavoriteMouseOver()
    {
        if (isFavorited)
        {
            hoverFavorite = "Remove";
        }
    }

    private void OnFavoriteMouseOut()
    {
        if (isFavorited)
        {
            hoverFavorite = "Favorited";
        }
    }
    private async Task ToggleQueue()
    {
        if (!string.IsNullOrEmpty(userName) && album != null)
        {
            await UserService.ToggleQueueAsync(album.AlbumId, userName);
            isQueued = !isQueued;
            hoverQueue = isQueued ? "In Queue" : "Queue";
        }
    }

    private void OnQueueMouseOver()
    {
        if (isQueued)
        {
            hoverQueue = "Remove";
        }
    }

    private void OnQueueMouseOut()
    {
        if (isQueued)
        {
            hoverQueue = "In Queue";
        }
    }
    private async Task SubmitRating(int rating)
    {
        if (rating == 0)
        {
            await UserService.RemoveRatingAsync(album.AlbumId, userName);
            isRated = false;
        }
        if (rating > 0 && !string.IsNullOrEmpty(userName) && album != null)
        {
            await UserService.SubmitAlbumRatingAsync(album.AlbumId, userName, rating);
            isRated = true;
            if (!isListened)
            {
                ToggleListen();
            }
            if (isQueued)
            {
                ToggleQueue();
            }
        }
        StateHasChanged();
    }
    private async Task SubmitReview()
    {
        int reviewLength = _reviewText.Length;
        if (string.IsNullOrEmpty(userName))
        {
            errorText += "Please make an account to submit your review!";
        }
        else if (reviewLength > 5000)
        {
            errorText = $"Sorry, reviews must be under 5000 characters! Your count: {reviewLength}";
        }
        else if (!string.IsNullOrEmpty(_reviewText) && !string.IsNullOrEmpty(userName))
        {
            errorText = "";
            await UserService.SubmitReviewAsync(album.AlbumId, userName, _reviewText);
            Snackbar.Add("Review saved successfully!", Severity.Success);
            if (isQueued)
            {
                ToggleQueue();
            }
            if (!isListened)
            {
                ToggleListen();
            }
        }
        else if (string.IsNullOrEmpty(_reviewText) && !string.IsNullOrEmpty(userName))
        {
            errorText = "";
            await UserService.RemoveReviewAsync(album.AlbumId, userName);
            Snackbar.Add("Review removed successfully!", Severity.Success);
        }
    }
}
