@using AlbumDatabaseServer.Data
@inject UserService UserService
@inject AlbumService AlbumService
@inject GenreService GenreService
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider

<PageTitle>@userName's albums • Waveformd</PageTitle>
<link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Material+Symbols+Outlined:opsz,wght,FILL,GRAD@20..48,100..700,0..1,-50..200" />
<div class="body">
    <div class="header-container">
        <h2 class="header">@listenedText</h2>
        <SortComponent allAlbums="@allListenedAlbums"
                       listType="listened"
                       totalPages="@totalPages"
                       OnAlbumsChanged="HandleAlbumsChanged"
                       OnTotalPagesChanged="HandleTotalPagesChanged" />
    </div>
	<div class="album-container">
		@if (listenedAlbums == null)
		{
            <p>No listens yet!</p>
        }
        else
        {
            if (listenedAlbums.Any())
            {
                foreach (var album in GetPaginatedAlbums())
                {
                    <div class="album-cover">
                        <img src="@album.AlbumCover" class="album-cover-img" @onclick="() => HandleNavigation(album)" />
                        <div class="star-container">
                            @if (albumRatings.TryGetValue(album.AlbumId, out int rating))
                            {
                                for (int i = 0; i < rating; i++)
                                {
                                    <span class="material-symbols-outlined star">
                                        star
                                    </span>
                                }
                            }
                        </div>
                    </div>
                }
            }
            else
            {
                <div class="no-albums-container">
                    <p class="no-albums-text">There are no albums with the selected sort parameters :(</p>
                </div>
            }
		}
	</div>
	<div class="pagination-controls">
		@foreach (var pageNumber in GetPageNumbers())
		{
			if (pageNumber == -1)
			{
				<span class="ellipsis">...</span>
			}
			else
			{
				<button @onclick="() => SetPage(pageNumber)"
						class="@(pageNumber == pageIndex ? "active-page" : "")">
					@pageNumber
				</button>
			}
		}
	</div>
</div>

@code {
    [Parameter] public string userName { get; set; }
    private string currentUsername;
    private bool isUserLoggedIn;
    private string listenedText;
    private List<Album> allListenedAlbums; // Master list
    private List<Album> listenedAlbums;
    private int pageIndex = 1;
    private int totalPages;
    private const int pageSize = 64;
    private Dictionary<int, int> albumRatings = new();


    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        currentUsername = user.Identity.Name;
        isUserLoggedIn = user.Identity.IsAuthenticated && currentUsername == userName;
        listenedText = isUserLoggedIn ? "You haven't listened to any albums..." 
            : userName + " hasn't listened to any albums...";
        var listenedAlbumsList = await UserService.GetListenedAlbumsAsync(userName);
        if (listenedAlbumsList.Any())
        {
            allListenedAlbums = listenedAlbumsList
                .Select(listened => AlbumService.Albums.FirstOrDefault(a => a.AlbumId == listened.AlbumId))
                .Where(album => album != null)
                .ToList();
            listenedText = isUserLoggedIn ? $"You've listened to {allListenedAlbums.Count()} albums" 
                : userName + $" has listened to {allListenedAlbums.Count()} albums";
            foreach (var album in allListenedAlbums)
            {
                var rating = await UserService.GetRatingIntAsync(album.AlbumId, userName);
                albumRatings[album.AlbumId] = rating;
                var listenDate = await UserService.GetDateListenedAsync(userName, album.AlbumId);
            }
            listenedAlbums = new List<Album>(allListenedAlbums); 
            totalPages = (int)Math.Ceiling((double)listenedAlbums.Count / pageSize);
        }
    }
    private void HandleAlbumsChanged(List<Album> newAlbums)
    {
        listenedAlbums = newAlbums;
        SetPage(1);
    }

    private void HandleTotalPagesChanged(int newTotalPages)
    {
        totalPages = newTotalPages;
        SetPage(1);
    }
    private List<Album> GetPaginatedAlbums()
    {
        return listenedAlbums
        .Skip((pageIndex - 1) * pageSize)
        .Take(pageSize)
        .ToList();
    }
    private void SetPage(int pageNum)
    {
        pageIndex = pageNum;
    }
    private IEnumerable<int> GetPageNumbers()
    {
        if (totalPages <= 5)
        {
            return Enumerable.Range(1, totalPages);
        }
        var pages = new List<int>();
        if (pageIndex == 1)
        {
            pages.AddRange(Enumerable.Range(1, pageIndex + 2));
            pages.Add(-1);
            pages.Add(totalPages);
        }
        else if (pageIndex > 1 && pageIndex < 5)
        {
            pages.AddRange(Enumerable.Range(1, pageIndex + 2));
            pages.Add(-1); // Ellipsis
            pages.Add(totalPages);
        }
        else if (pageIndex > 4 && pageIndex < totalPages - 2)
        {
            pages.Add(1);
            pages.Add(-1); // Ellipsis
            pages.AddRange(Enumerable.Range(pageIndex - 2, 5));
            pages.Add(-1);
            pages.Add(totalPages);
        }
        else if (pageIndex > 4 && pageIndex >= totalPages - 2 && pageIndex < totalPages)
        {
            pages.Add(1);
            pages.Add(-1);
            pages.AddRange(Enumerable.Range(pageIndex - 2, totalPages - pageIndex + 3));
        }
        else if (pageIndex > 4 && pageIndex == totalPages)
        {
            pages.Add(1);
            pages.Add(-1);
            pages.AddRange(Enumerable.Range(pageIndex - 2, 3));
        }
        return pages;
    }
    private void HandleNavigation(Album album)
    {
        var encodedArtistName = Uri.EscapeDataString(album.Artist.ArtistName);
        var encodedAlbumName = Uri.EscapeDataString(album.Name);
        NavigationManager.NavigateTo($"/albums/{encodedArtistName}/{encodedAlbumName}");
    }
}