@using AlbumDatabaseServer.Data
@inject UserService UserService
@inject AlbumService AlbumService
@inject GenreService GenreService
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider

<link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Material+Symbols+Outlined:opsz,wght,FILL,GRAD@20..48,100..700,0..1,-50..200" />
<div class="sort-container">
    <div class="rating-sort">
        @if (listType != "queued")
        {
            <MudExpansionPanel Text="@ratingText" IsExpanded="@isRatingPanelExpanded"
                    @onmouseenter="() => isRatingPanelExpanded = true"
                    @onmouseleave="() => isRatingPanelExpanded = false">
                <h3 class="sort-label rating" @onclick="() => ResetRateSort()">Any</h3>
                <MudRating @bind-SelectedValue="ratingSortValue" Size="Size.Small" Color="Color.Success" />
            </MudExpansionPanel>
        }
    </div>
    <div class="decade-sort">
        <MudExpansionPanel Text="@decadeText" IsExpanded="@isDecadePanelExpanded"
                    @onmouseenter="() => isDecadePanelExpanded = true"
                    @onmouseleave="() => isDecadePanelExpanded = false">
            <div class="decades-container">
                <p class="sort-label" @onclick="() => DecadeSort(0)">All</p>
                @foreach (var decade in decades)
                {
                    <p class="sort-label" @onclick="() => DecadeSort(decade)">@decade's</p>
                }
            </div>
        </MudExpansionPanel>
    </div>
    <div class="genre-sort">
        <MudExpansionPanel Text="@genreText" IsExpanded="@isGenrePanelExpanded"
                    @onmouseenter="() => isGenrePanelExpanded = true"
                    @onmouseleave="() => isGenrePanelExpanded = false">
            <div class="genres-container">
                <p class="sort-label" @onclick="() => ResetGenreSort()">Any</p>
                @foreach (var genre in genres)
                {
                    <p class="sort-label" @onclick="() => GenreSort(genre)">@genre.Name</p>
                }
            </div>
        </MudExpansionPanel>
    </div>
    <div class="main-sort">
        <MudExpansionPanel Text="@sortText" IsExpanded="@isSortPanelExpanded"
                    @onmouseenter="() => isSortPanelExpanded = true"
                    @onmouseleave="() => isSortPanelExpanded = false">
            <div class="general-sort-container">
                <div class="sort-type">
                    <p class="sub-type name @((sortId == 0) ? "active" : "")" @onclick="() => GeneralSort(0)">Album Name</p>
                </div>
                <div class="sort-type">
                    @if (listType == "listened")
                    {
                        <p class="sort-label-nofunc">Listen Date</p>
                    }
                    else if (listType == "queued")
                    {
                        <p class="sort-label-nofunc">Queue Date</p>
                    }
                    else if (listType == "favorited")
                    {
                        <p class="sort-label-nofunc">Favorite Date</p>
                    }
                    else if (listType == "reviewed")
					{
						<p class="sort-label-nofunc">Review Date</p>
                    }
                    <p class="sub-type @((sortId == 1) ? "active" : "")" @onclick="() => GeneralSort(1)">Newest First</p>
                    <p class="sub-type @((sortId == 2) ? "active" : "")" @onclick="() => GeneralSort(2)">Earliest First</p>
                </div>
                <div class="sort-type">
                    <p class="sort-label-nofunc">Release Date</p>
                    <p class="sub-type @((sortId == 3) ? "active" : "")" @onclick="() => GeneralSort(3)">Newest First</p>
                    <p class="sub-type @((sortId == 4) ? "active" : "")" @onclick="() => GeneralSort(4)">Earliest First</p>
                </div>
                <div class="sort-type">
                    <p class="sort-label-nofunc">Average Rating</p>
                    <p class="sub-type @((sortId == 5) ? "active" : "")" @onclick="() => GeneralSort(5)">Highest First</p>
                    <p class="sub-type @((sortId == 6) ? "active" : "")" @onclick="() => GeneralSort(6)">Lowest First</p>
                </div>
                <div class="sort-type">
                    <p class="sort-label-nofunc">Your Rating</p>
                    <p class="sub-type @((sortId == 7) ? "active" : "")" @onclick="() => GeneralSort(7)">Highest First</p>
                    <p class="sub-type @((sortId == 8) ? "active" : "")" @onclick="() => GeneralSort(8)">Lowest First</p>
                </div>
            </div>
        </MudExpansionPanel>
    </div>
</div>
@code {
    [Parameter] public List<Album> allAlbums { get; set; }
    [Parameter] public string listType { get; set; } // "listened", "queued" or "favorited"
    [Parameter] public int totalPages { get; set; }
    [Parameter] public EventCallback<List<Album>> OnAlbumsChanged { get; set; }
    [Parameter] public EventCallback<int> OnTotalPagesChanged { get; set; }

    public List<Album> albums;
    private string userName;
    private List<int> decades;
    private List<Genre> genres = new();
    private Dictionary<int, int> albumRatings = new();
    private Dictionary<int, DateTime> albumListenDates = new();
    private Dictionary<int, DateTime> albumQueueDates = new();
    private Dictionary<int, DateTime> albumFavoriteDates = new();
    private Dictionary<int, DateTime> albumReviewDates = new();
    private string decadeText = "Decade";
    private string genreText = "Genre";
    private string sortText = "Sort by Listen Date"; // Default sort
    private string ratingText
    {
        get
        {
            if (ratingSortValue == 0)
            {
                return "Rating";
            }
            return new string('★', ratingSortValue) + new string('☆', 5 - ratingSortValue);
        }
    }
    private int selectedDecade = 0;
    private bool isRatingSortActive = false;
    private bool isDecadeSortActive = false;
    private bool isGenreSortActive = false;
    private int sortId = 1;
    private bool isRatingPanelExpanded = false;
    private bool isDecadePanelExpanded = false;
    private bool isGenrePanelExpanded = false;
    private bool isSortPanelExpanded = false;
    private int _ratingSortValue = 0;
    private int ratingSortValue
    {
        get => _ratingSortValue;
        set
        {
            if (_ratingSortValue != value)
            {
                _ratingSortValue = value;
                _ = RatingSort(); // Trigger sorting
            }
        }
    }
    protected override async Task OnParametersSetAsync()
    {
        if (allAlbums == null)
        {
            allAlbums = new List<Album>();
        }
        decades = GenerateDecades(1900, DateTime.UtcNow.Year);
        genres = GenreService.Genres;
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        if (user.Identity.IsAuthenticated)
        {
            userName = user.Identity.Name;
            if (listType == "queued")
            {                
                foreach (var album in allAlbums)
                {
                    var rating = await GetAlbumRating(album.AlbumId);
                    albumRatings[album.AlbumId] = rating;
                    var queueDate = await UserService.GetDateQueuedAsync(userName, album.AlbumId);
                    albumQueueDates[album.AlbumId] = queueDate;
                }
                sortText = "Sort by Queue Date";
            }
            else if (listType == "listened")
            {
                foreach (var album in allAlbums)
                {
                    var rating = await GetAlbumRating(album.AlbumId);
                    albumRatings[album.AlbumId] = rating;
                    var listenDate = await UserService.GetDateListenedAsync(userName, album.AlbumId);
                    albumListenDates[album.AlbumId] = listenDate;
                }
                sortText = "Sort by Listen Date";
            }
            else if (listType == "favorited")
            {
                foreach (var album in allAlbums)
                {
                    var rating = await GetAlbumRating(album.AlbumId);
                    albumRatings[album.AlbumId] = rating;
                    var favoriteDate = await UserService.GetDateFavoritedAsync(userName, album.AlbumId);
                    albumFavoriteDates[album.AlbumId] = favoriteDate;
                }
                sortText = "Sort by Favorite Date";
            }
            else if (listType == "reviewed")
            {
                foreach (var album in allAlbums)
                {
                    var rating = await GetAlbumRating(album.AlbumId);
                    albumRatings[album.AlbumId] = rating;
                    var reviewDate = await UserService.GetDateReviewedAsync(userName, album.AlbumId);
                    albumReviewDates[album.AlbumId] = reviewDate;
                }
                sortText = "Sort by Review Date";
            }
            albums = new List<Album>(allAlbums);
            totalPages = (int)Math.Ceiling(albums.Count() / 10.0);
            await UpdateTotalPages(totalPages);
        }
        await base.OnParametersSetAsync();
    }
    private async Task<int> GetAlbumRating(int albumId)
    {
        return await UserService.GetRatingIntAsync(albumId, userName);
    }
    private async Task RatingSort()
    {
        albums = new List<Album>(allAlbums);
        await GeneralSort(sortId); // Apply general sort (if any)
        if (isDecadeSortActive)
        {
            albums = albums
                .Where(album => album.ReleaseDate.Year >= selectedDecade && album.ReleaseDate.Year < selectedDecade + 10)
                .ToList();
        }
        if (isGenreSortActive)
        {
            albums = albums
                .Where(album => album.AlbumGenres.Any(ag => ag.GenreId == genres.Find(g => g.Name == genreText).GenreId))
                .ToList();
        }
        if (ratingSortValue == 0)
        {
            isRatingSortActive = false;
        }
        else if (ratingSortValue > 0)
        {
            isRatingSortActive = true;
            var ratedAlbums = await Task.WhenAll(
                albums.Select(async a =>
                {
                    if (a == null) throw new InvalidOperationException("Album is null.");
                    var rating = await UserService.GetRatingIntAsync(a.AlbumId, userName);
                    return new { Album = a, Rating = rating };
                })
            );

            albums = ratedAlbums
                .Where(x => x.Rating == ratingSortValue)
                .Select(x => x.Album)
                .ToList();
        }
        totalPages = (int)Math.Ceiling(albums.Count() / 10.0);
        await UpdateTotalPages(totalPages);
        await NotifyAlbumsChanged();
    }
    private async Task ResetRateSort()
    {
        isRatingSortActive = false;
        ratingSortValue = 0;
        await RatingSort();
    }
    private List<int> GenerateDecades(int startYear, int currentYear)
    {
        var decadesList = new List<int>();
        int latestDecade = (currentYear / 10) * 10;
        for (int year = latestDecade; year >= startYear; year -= 10)
        {
            decadesList.Add(year);
        }
        return decadesList;

    }
    private async Task DecadeSort(int decade)
    {
        albums = new List<Album>(allAlbums);
        if (decade == 0)
        {
            isDecadeSortActive = false;
            decadeText = "Decade";
        }
        await GeneralSort(sortId); // Apply general sort (if any)
        if (isRatingSortActive)
        {
            var ratedAlbums = albums
                .Where(album => albumRatings.TryGetValue(album.AlbumId, out int rating) && rating == ratingSortValue)
                .ToList();

            albums = ratedAlbums;
        }
        if (isGenreSortActive)
        {
            albums = albums
                .Where(album => album.AlbumGenres.Any(ag => ag.GenreId == genres.Find(g => g.Name == genreText).GenreId))
                .ToList();
        }
        if (decade > 0)
        {
            isDecadeSortActive = true;
            decadeText = $"{decade}'s";
            albums = albums
                .Where(album => album.ReleaseDate.Year >= decade && album.ReleaseDate.Year < decade + 10)
                .ToList();
        }
        totalPages = (int)Math.Ceiling(albums.Count() / 10.0);
        await UpdateTotalPages(totalPages);
        await NotifyAlbumsChanged();
    }
    private async Task ResetGenreSort()
    {
        genreText = "Genre";
        isGenreSortActive = false;
        albums = new List<Album>(allAlbums);
        if (isRatingSortActive) await RatingSort();
        if (isDecadeSortActive) await DecadeSort(selectedDecade);
        await GeneralSort(sortId);
    }
    private async Task GenreSort(Genre genre)
    {
        genreText = genre.Name;
        isGenreSortActive = true;
        albums = new List<Album>(allAlbums);
        await GeneralSort(sortId); // Apply general sort (if any)
        if (isRatingSortActive)
        {
            var ratedAlbums = albums
                .Where(album => albumRatings.TryGetValue(album.AlbumId, out int rating) && rating == ratingSortValue)
                .ToList();

            albums = ratedAlbums;
        }
        if (isDecadeSortActive)
        {
            albums = albums
                .Where(album => album.ReleaseDate.Year >= selectedDecade && album.ReleaseDate.Year < selectedDecade + 10)
                .ToList();
        }
        albums = albums
            .Where(album => album.AlbumGenres.Any(ag => ag.GenreId == genre.GenreId))
            .ToList();
        totalPages = (int)Math.Ceiling(albums.Count() / 10.0);
        await UpdateTotalPages(totalPages);
        await NotifyAlbumsChanged();
    }
    private async Task GeneralSort(int id)
    {
        if (isDecadeSortActive)
        {
            albums = albums
                .Where(album => album.ReleaseDate.Year >= selectedDecade && album.ReleaseDate.Year < selectedDecade + 10)
                .ToList();
        }
        if (isGenreSortActive)
        {
            albums = albums
                .Where(album => album.AlbumGenres.Any(ag => ag.GenreId == genres.Find(g => g.Name == genreText).GenreId))
                .ToList();
        }
        if (isRatingSortActive)
        {
            var ratedAlbums = albums
                .Where(album => albumRatings.TryGetValue(album.AlbumId, out int rating) && rating == ratingSortValue)
                .ToList();

            albums = ratedAlbums;
        }
        sortId = id;
        switch (id)
        {
            case 0:
                albums = albums.OrderBy(a => a.Name).ToList();
                sortText = "Sort by Album Name";
                break;
            case 1:
                if (listType == "listened") 
                {
                    albums = albums.OrderByDescending(a => albumListenDates[a.AlbumId]).ToList();
                    sortText = "Sort by Listen Date";
                }
                else if (listType == "queued")
                {
                    albums = albums.OrderByDescending(a => albumQueueDates[a.AlbumId]).ToList();
                    sortText = "Sort by Queue Date";
                }
                else if (listType == "favorited")
                {
                    albums = albums.OrderByDescending(a => albumFavoriteDates[a.AlbumId]).ToList();
                    sortText = "Sort by Favorite Date";
                }
                else if (listType == "reviewed")
                {
                    albums = albums.OrderByDescending(a => albumReviewDates[a.AlbumId]).ToList();
                    sortText = "Sort by Review Date";
                }
                else
                {
                    sortText = "ERROR: Invalid list type.";
                }
                break;
            case 2:
                if (listType == "listened")
                {
                    albums = albums.OrderBy(a => albumListenDates[a.AlbumId]).ToList();
                    sortText = "Sort by Listen Date";
                }
                else if (listType == "queued")
                {
                    albums = albums.OrderBy(a => albumQueueDates[a.AlbumId]).ToList();
                    sortText = "Sort by Queue Date";
                }
                else if (listType == "favorited")
                {
                    albums = albums.OrderBy(a => albumFavoriteDates[a.AlbumId]).ToList();
                    sortText = "Sort by Favorite Date";
                }
                else if (listType == "reviewed")
                {
                    albums = albums.OrderBy(a => albumReviewDates[a.AlbumId]).ToList();
                    sortText = "Sort by Review Date";
                }
                else
                {
                    sortText = "ERROR: Invalid list type.";
                }
                break;
            case 3:
                albums = albums.OrderByDescending(a => a.ReleaseDate).ToList();
                sortText = "Sort by Release Date";
                break;
            case 4:
                albums = albums.OrderBy(a => a.ReleaseDate).ToList();
                sortText = "Sort by Release Date";
                break;
            case 5:
                albums = albums.OrderByDescending(a => AlbumService.GetAverageRating(a.AlbumId)).ToList();
                sortText = "Sort by Average Rating";
                break;
            case 6:
                albums = albums.OrderBy(a => AlbumService.GetAverageRating(a.AlbumId)).ToList();
                sortText = "Sort by Average Rating";
                break;
            case 7:
                albums = albums.OrderByDescending(a => albumRatings[a.AlbumId]).ToList();
                sortText = "Sort by Your Rating";
                break;
            case 8:
                albums = albums.OrderBy(a => albumRatings[a.AlbumId]).ToList();
                sortText = "Sort by Your Rating";
                break;
        }
        await NotifyAlbumsChanged();
    }
    private int previousTotalPages = -1;
    private async Task UpdateTotalPages(int newTotalPages)
    {
        if (newTotalPages != previousTotalPages)
        {
            previousTotalPages = newTotalPages;
        }
    }
    private List<Album> previousAlbums;
    private async Task NotifyAlbumsChanged()
    {
        if (!Enumerable.SequenceEqual(previousAlbums ?? new List<Album>(), albums))
        {
            previousAlbums = new List<Album>(albums);
            await OnAlbumsChanged.InvokeAsync(albums);
        }
    }
}