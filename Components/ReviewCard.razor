@using AlbumDatabaseServer.Data
@inject UserService UserService
@inject AlbumService AlbumService
@inject GenreService GenreService
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider

<div class="review-container @(width  != string.Empty ? width : "")">
	<div class="album-cover" hidden="@(width == "album-view")" @onclick="() => HandleNavigation(3)">
		<AlbumComponent Album="@album" DisplayInfo=false Size="@(width == "home" ? "tiny" : "small")" DisableClick="true"/>
	</div>
	<div class="review-content">
		@if (userName != null && width == "album-view")
		{
			<img src="@userProfilePicture" class="profile-picture" @onclick="() => HandleNavigation(2)" />
		}
		<div class="album-info">
			@if (userName != null && width == "home")
			{
				<div class="home-profile">
					<img src="@userProfilePicture" class="profile-picture home" @onclick="() => HandleNavigation(2)" />
					<p class="username" @onclick="() => HandleNavigation(2)"> @userName</p>
				</div>
			}
			<div class="album-name-year" hidden="@(width == "album-view")">
				<h2 class="album-name" @onclick="() => HandleNavigation(3)">@album.Name</h2>
				<h3 class="album-year">@album.ReleaseDate.ToString("yyyy")</h3>
			</div>
			<h3 class="album-artist" hidden="@(width == "album-view")" @onclick="() => HandleNavigation(1)">@album.Artist.ArtistName</h3>
			<div class="user-info-container">
				@if (userName != null && width == "album-view")
				{
					<div class="picture-username">
						<p class="username-text">Review by </p>
						<p class="username" @onclick="() => HandleNavigation(2)"> @userName</p>
					</div>
				}
				<div class="star-container">
					@if (albumRating != null)
					{
						@for (int i = 0; i < albumRating; i++)
						{
							<span class="material-symbols-outlined star">
								star
							</span>
						}
					}
				</div>
				@if (isFavorited)
				{
					<span class="material-symbols-outlined favorite">
						favorite
					</span>
				}
				@if (width != "album-view")
				{
					<h4 class="listened-text">Listened @dateListened.ToString("dd MMM, yyyy")</h4>
				}
			</div>
			<div class="review-text @(width  != string.Empty ? width : "")">
				<p>@reviewText</p>
			</div>
		</div>
	</div>
</div>

@code {
	[Parameter] public Album album { get; set; }
	[Parameter] public string width { get; set; }
	[Parameter] public string userName { get; set; }
	private int albumRating;
	private bool isFavorited;
	private DateTime dateListened;
	private string reviewText;
	private string userProfilePicture = "profile-pictures/default-profile.png";

	protected override async Task OnParametersSetAsync()
	{
		var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
		if (album != null)
		{
			albumRating = await UserService.GetRatingIntAsync(album.AlbumId, userName);
			isFavorited = await UserService.IsAlbumFavoritedAsync(album.AlbumId, userName);
			dateListened = await UserService.GetDateListenedAsync(userName, album.AlbumId);
			var review = await UserService.GetReviewAsync(album.AlbumId, userName);
			reviewText = review.ReviewText;
		}
		if (userName != null)
		{
			var profilePicture = await UserService.GetAccountPicAsync(userName);
			if (profilePicture != string.Empty) userProfilePicture = profilePicture;
		}
	}
	private void HandleNavigation(int type)
	{
		if (type == 0)
		{
			var encodedArtistName = Uri.EscapeDataString(album.Artist.ArtistName);
			var encodedAlbumName = Uri.EscapeDataString(album.Name);
			NavigationManager.NavigateTo($"/albums/{encodedArtistName}/{encodedAlbumName}");
		}
		else if (type == 1)
		{
			var encodedArtistName = Uri.EscapeDataString(album.Artist.ArtistName);
			NavigationManager.NavigateTo($"/artists/{encodedArtistName}?artistId={album.ArtistId}");
		}
		else if (type == 2)
		{
			NavigationManager.NavigateTo($"/{userName}");
		}
		else if (type == 3)
		{
			NavigationManager.NavigateTo($"/{userName}/album/{album.Name}");
		}
	}

}
