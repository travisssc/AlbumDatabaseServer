@using AlbumDatabaseServer.Data
@inject UserService UserService
@inject AlbumService AlbumService
@inject GenreService GenreService
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider

<PageTitle>@userName's reviews • Waveformd</PageTitle>
<link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Material+Symbols+Outlined:opsz,wght,FILL,GRAD@20..48,100..700,0..1,-50..200" />
<div class="body">
	<div class="header-container">
		<h2 class="header">@reviewText</h2>
		<SortComponent allAlbums="@allReviewedAlbums"
					   listType="reviewed"
					   totalPages="@totalPages"
					   OnAlbumsChanged="HandleAlbumsChanged"
					   OnTotalPagesChanged="HandleTotalPagesChanged" />
	</div>
	<div class="body-container">
		@if (reviewedAlbums == null)
		{
			<div class="no-review-container">
				<p>Loading...</p>
			</div>
		}
		else if (!reviewedAlbums.Any())
		{
			<div class="no-review-container">
				<p>You haven't written any reviews yet!</p>
			</div>
		}
		else
		{
			if (reviewedAlbums.Any())
			{
				foreach (var album in GetPaginatedAlbums())
				{
					<ReviewCard album="album" userName="@userName" />
				}
			}
			else
			{
				<div class="no-albums-container">
                    <p class="no-albums-text">There are no reviews with the selected sort parameters :(</p>
                </div>
			}
			
		}
	</div>
	<div class="pagination-controls">
		@foreach (var pageNumber in GetPageNumbers())
		{
			if (pageNumber == -1)
			{
				<span class="ellipsis">...</span>
			}
			else
			{
				<button @onclick="() => SetPage(pageNumber)"
						class="@(pageNumber == pageIndex ? "active-page" : "")">
					@pageNumber
				</button>
			}
		}
	</div>
</div>

@code {
	[Parameter] public string userName { get; set; }
	private string currentUsername;
	private bool isUserLoggedIn;
	private string reviewText;
	private List<Album> allReviewedAlbums;
	private List<Album> reviewedAlbums;
	private Dictionary<int, int> albumRatings = new();
	private Dictionary<int, bool> albumFavorites = new();
	private Dictionary<int, DateTime> albumDatesListened = new();
	private Dictionary<int, string> albumReviews = new();
	private int pageIndex = 1;
	private int totalPages;
	private const int pageSize = 12;

	protected override async Task OnInitializedAsync()
	{
		var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
		var user = authState.User;
		currentUsername = user.Identity.Name;
		isUserLoggedIn = user.Identity.IsAuthenticated && currentUsername == userName;
		reviewText = isUserLoggedIn ? "You haven't written any reviews yet..." 
			: $"{userName} hasn't written any reviews yet...";
		var reviewsList = await UserService.GetReviewedAlbumsAsync(userName);
		if (reviewsList.Any())
		{
			allReviewedAlbums = reviewsList
				.Select(review => AlbumService.Albums.FirstOrDefault(a => a.AlbumId == review.AlbumId))
				.Where(album => album != null)
				.ToList();
			reviewText = isUserLoggedIn ? $"Your reviews" : $"{userName}'s reviews";
			foreach (var album in allReviewedAlbums)
			{
				var rating = await UserService.GetRatingIntAsync(album.AlbumId, userName);
				albumRatings[album.AlbumId] = rating;
				var favorite = await UserService.IsAlbumFavoritedAsync(album.AlbumId, userName);
				albumFavorites[album.AlbumId] = favorite;
				var dateListened = await UserService.GetDateListenedAsync(userName, album.AlbumId);
				albumDatesListened[album.AlbumId] = dateListened;
				var review = await UserService.GetReviewAsync(album.AlbumId, userName);
				albumReviews[album.AlbumId] = review.ReviewText;
			}
			reviewedAlbums = new List<Album>(allReviewedAlbums);
			totalPages = (int)Math.Ceiling((double)reviewedAlbums.Count / pageSize);
		}
	}
	private void HandleAlbumsChanged(List<Album> newAlbums)
	{
		reviewedAlbums = newAlbums;
		SetPage(1);
	}

	private void HandleTotalPagesChanged(int newTotalPages)
	{
		totalPages = newTotalPages;
		SetPage(1);
	}
	private List<Album> GetPaginatedAlbums()
	{
		return reviewedAlbums
		.Skip((pageIndex - 1) * pageSize)
		.Take(pageSize)
		.ToList();
	}
	private void SetPage(int pageNum)
	{
		pageIndex = pageNum;
	}
	private IEnumerable<int> GetPageNumbers()
	{
		if (totalPages <= 5)
		{
			return Enumerable.Range(1, totalPages);
		}
		var pages = new List<int>();
		if (pageIndex == 1)
		{
			pages.AddRange(Enumerable.Range(1, pageIndex + 2));
			pages.Add(-1);
			pages.Add(totalPages);
		}
		else if (pageIndex > 1 && pageIndex < 5)
		{
			pages.AddRange(Enumerable.Range(1, pageIndex + 2));
			pages.Add(-1); // Ellipsis
			pages.Add(totalPages);
		}
		else if (pageIndex > 4 && pageIndex < totalPages - 2)
		{
			pages.Add(1);
			pages.Add(-1); // Ellipsis
			pages.AddRange(Enumerable.Range(pageIndex - 2, 5));
			pages.Add(-1);
			pages.Add(totalPages);
		}
		else if (pageIndex >= totalPages - 2 && pageIndex < totalPages)
		{
			pages.Add(1);
			pages.Add(-1);
			pages.AddRange(Enumerable.Range(pageIndex - 2, totalPages - pageIndex + 3));
		}
		else
		{
			pages.Add(1);
			pages.Add(-1);
			pages.AddRange(Enumerable.Range(pageIndex - 2, 3));
		}


		return pages;
	}
}
