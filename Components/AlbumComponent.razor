@using AlbumDatabaseServer.Data
@using AlbumDatabaseServer.Data
@inject AlbumService AlbumService
@inject UserService UserService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager

<link rel="stylesheet" href="https://fonts.googleapis.com/css2?family=Material+Symbols+Outlined:opsz,wght,FILL,GRAD@20..48,100..700,0..1,-50..200" />
@if (!string.IsNullOrEmpty(Album.AlbumCover))
{
	<div class="album-card @(Size)" @onclick="() => HandleNavigation(Album)"
		style="background: @Color">
		<div class="album-card-content">
			<img src="@Album.AlbumCover" class="album-cover" />
			<div class="album-menu">
				<button class="function-button"
						@onclick:stopPropagation="true" @onclick="ToggleListen">
					<span class="material-symbols-outlined icon listen @(isListened ? "active" : "")">
						album
					</span>
				</button>
				<button class="function-button"
						@onclick:stopPropagation="true" @onclick="ToggleFavorite">
					<span class="material-symbols-outlined icon fav @(isFavorited ? "active" : "")">
						favorite
					</span>
				</button>
				<button class="function-button"
						@onclick:stopPropagation="true" @onclick="ToggleQueue">
					<span class="material-symbols-outlined icon q @(isQueued ? "active" : "")">
						@(isQueued ? "playlist_add_check_circle" : "playlist_add_circle")
					</span>
				</button>
			</div>
			<div class="album-info" hidden="@(!DisplayInfo)">
				@if (!string.IsNullOrEmpty(Album.Name))
				{
					<subtitle1 class="album-title">@Album.Name</subtitle1>
				}
				else
				{
					<subtitle1>Album name is missing!</subtitle1>
				}
				@if (Album.Artist != null && !string.IsNullOrEmpty(Album.Artist.ArtistName))
				{
					<body2 class="album-artist">@Album.Artist.ArtistName</body2>
				}
				else
				{
					<subtitle1>Artist name is missing!</subtitle1>
				}
			</div>
			<div class="activity" hidden="@(!Activity)">
				<img src="@userProfilePic" class="activity-profile-pic" />
                <p class="username-text">@ActivityUsername</p>
            </div>
		</div>
	</div>
}
else
{
	<subtitle1>Album cover is missing!</subtitle1>
}


@code {
	[Parameter] public Album Album { get; set; }
	[Parameter] public bool DisplayInfo { get; set; } = true;
	[Parameter] public string Size { get; set; }
	[Parameter] public string Color { get; set; }
	[Parameter] public bool Activity { get; set; } = false;
	[Parameter] public string ActivityUsername { get; set; }
	private bool isListened = false;
	private bool isFavorited = false;
	private bool isQueued = false;
	private string userName;
	private string userProfilePic = "profile-pictures/default-profile.png";

	protected override async Task OnInitializedAsync()
	{
		if (DisplayInfo) Size = "large";
		else if (Size != "review") Size = "small";
		var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
		var user = authState.User;
		if (user.Identity.IsAuthenticated)
		{
			userName = user.Identity.Name;
			if (Album != null)
			{
				isListened = await UserService.IsAlbumListenedAsync(Album.AlbumId, userName);
				isFavorited = await UserService.IsAlbumFavoritedAsync(Album.AlbumId, userName);
				isQueued = await UserService.IsAlbumQueuedAsync(Album.AlbumId, userName);
			}
		}
		if (ActivityUsername != null)
		{
			var profilePic = await UserService.GetAccountPicAsync(ActivityUsername);
			if (profilePic != string.Empty)
			{
				userProfilePic = profilePic;
			}
		}
	}
	public async Task ToggleListen()
	{
		if (!string.IsNullOrEmpty(userName) && Album != null)
		{
			await UserService.ToggleListenAsync(Album.AlbumId, userName);
			isListened = !isListened;
			if (isQueued && isListened)
			{
				ToggleQueue();
			}
			StateHasChanged();
		}
	}
	public async Task ToggleFavorite()
	{
		if (!string.IsNullOrEmpty(userName) && Album != null)
		{
			await UserService.ToggleFavoriteAsync(Album.AlbumId, userName);
			isFavorited = !isFavorited;
			StateHasChanged();
		}
	}
	public async Task ToggleQueue()
	{
		if (!string.IsNullOrEmpty(userName) && Album != null)
		{
			await UserService.ToggleQueueAsync(Album.AlbumId, userName);
			isQueued = !isQueued;
			StateHasChanged();
		}
	}
	private void HandleNavigation(Album album)
	{
		var encodedArtistName = Uri.EscapeDataString(album.Artist.ArtistName);
		var encodedAlbumName = Uri.EscapeDataString(album.Name);
		NavigationManager.NavigateTo($"/albums/{encodedArtistName}/{encodedAlbumName}");
	}
}
